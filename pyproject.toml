[project]
  name = "mcp_server_openai"
  version = "0.2.0"
  description = "FastMCP server with tools, resources, and prompts"
  readme = "README.md"
  requires-python = ">=3.10"
  dependencies = [
    "fastapi",
    "mcp[cli]",
    "httpx",
  "requests",
  "aiofiles",
  "langchain-openai",
  "langchain-core",
  "langchain-anthropic",
  "langchain-google-genai",
    "pydantic",
    "PyYAML",
    "python-pptx",
    "starlette>=0.37",
    "uvicorn[standard]>=0.29",
    'uvloop==0.21.0; platform_system != "Windows"',
    "Jinja2>=3.1.3",
    "websockets>=12.0",
    "slowapi>=0.1.9",
    "python-multipart>=0.0.9",
    "orjson>=3.10.0",
    "brotli>=1.1.0",
    "psutil>=5.9.0",
    "types-requests>=2.32.4.20250809",
  "types-psutil>=5.9.5.20240205",
    "superclaude>=3.0.0.2",
]

[tool.pytest.ini_options]
  addopts = "-q"
  pythonpath = ["src"]
  testpaths = ["tests"]
  asyncio_mode = "auto"
  tdd_guard_project_root = "/mnt/c/Users/adars/PycharmProjects/PythonProject/mcp_server_openai"

[build-system]
  requires = ["setuptools","wheel"]
  build-backend = "setuptools.build_meta"

[tool.setuptools]
  package-dir = {"" = "src"}

[tool.setuptools.packages.find]
  where = ["src"]


[project.scripts]
mcp_server_openai = "mcp_server_openai.__main__:main"


[tool.hatch.build.targets.wheel]
packages = ["src/mcp_server_openai"]

[tool.poetry.dependencies]
python = "^3.12"
uvloop = { version = "0.21.0", markers = "platform_system != 'Windows'" }

[tool.black]
line-length = 120
target-version = ["py312"]

[tool.ruff]
line-length = 120
target-version = "py312"
exclude = [".venv", "venv", "build", "dist"]

[tool.ruff.lint]
select = ["E", "F", "W", "I", "UP", "B", "C4"]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "colorama>=0.4.6",
    "hatch>=1.14.1",
    "mypy>=1.17.1",
    "pre-commit>=4.3.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.9",
    "types-pyyaml>=6.0.12.20250809",
    "tdd-guard-pytest>=0.1.1",
]
monitoring = [
    "claude-monitor>=3.1.0",
]
