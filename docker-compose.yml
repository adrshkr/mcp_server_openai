version: '3.8'

services:
  # Presenton API for PPT generation
  presenton:
    image: presenton/presenton:latest
    container_name: presenton-api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    volumes:
      - presenton_data:/app/data
      - presenton_templates:/app/templates
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Enhanced Content Generator (our main service)
  enhanced-generator:
    build:
      context: .
      dockerfile: Dockerfile.enhanced
    container_name: enhanced-content-generator
    ports:
      - "8000:8000"
    environment:
      - PRESENTON_API_URL=http://presenton:3000
      - UNSPLASH_API_KEY=${UNSPLASH_API_KEY}
      - STABLE_DIFFUSION_API_KEY=${STABLE_DIFFUSION_API_KEY}
      - PIXABAY_API_KEY=${PIXABAY_API_KEY}
      - CUSTOM_ICON_API_KEY=${CUSTOM_ICON_API_KEY}
      - LOG_LEVEL=INFO
    volumes:
      - ./output:/app/output
      - ./config:/app/config
      - ./logs:/app/logs
    networks:
      - mcp-network
    depends_on:
      presenton:
        condition: service_healthy
      mcp-sequential-thinking:
        condition: service_healthy
      mcp-brave-search:
        condition: service_healthy
      mcp-memory:
        condition: service_healthy
      mcp-filesystem:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # MCP Sequential Thinking Server
  mcp-sequential-thinking:
    image: modelcontextprotocol/server-sequential-thinking:latest
    container_name: mcp-sequential-thinking
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - LOG_LEVEL=INFO
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # MCP Brave Search Server
  mcp-brave-search:
    image: modelcontextprotocol/server-brave-search:latest
    container_name: mcp-brave-search
    ports:
      - "3002:3002"
    environment:
      - PORT=3002
      - BRAVE_API_KEY=${BRAVE_API_KEY}
      - LOG_LEVEL=INFO
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # MCP Memory Server
  mcp-memory:
    image: modelcontextprotocol/server-memory:latest
    container_name: mcp-memory
    ports:
      - "3003:3003"
    environment:
      - PORT=3003
      - LOG_LEVEL=INFO
      - MAX_CONTEXT_SIZE=10MB
      - RETENTION_DAYS=30
    volumes:
      - memory_data:/app/data
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # MCP Filesystem Server
  mcp-filesystem:
    image: modelcontextprotocol/server-filesystem:latest
    container_name: mcp-filesystem
    ports:
      - "3004:3004"
    environment:
      - PORT=3004
      - LOG_LEVEL=INFO
      - BASE_PATH=/app/data
      - MAX_FILE_SIZE=100MB
    volumes:
      - filesystem_data:/app/data
      - ./output:/app/output:rw
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # MCP Image Generation Server (our custom service)
  mcp-image-generation:
    build:
      context: .
      dockerfile: Dockerfile.image-generation
    container_name: mcp-image-generation
    ports:
      - "3005:3005"
    environment:
      - PORT=3005
      - UNSPLASH_API_KEY=${UNSPLASH_API_KEY}
      - STABLE_DIFFUSION_API_KEY=${STABLE_DIFFUSION_API_KEY}
      - PIXABAY_API_KEY=${PIXABAY_API_KEY}
      - LOG_LEVEL=INFO
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # MCP Icon Generation Server (our custom service)
  mcp-icon-generation:
    build:
      context: .
      dockerfile: Dockerfile.icon-generation
    container_name: mcp-icon-generation
    ports:
      - "3006:3006"
    environment:
      - PORT=3006
      - CUSTOM_ICON_API_KEY=${CUSTOM_ICON_API_KEY}
      - LOG_LEVEL=INFO
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: mcp-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - mcp-network
    depends_on:
      - enhanced-generator
      - presenton
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: mcp-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=mcp_content
      - POSTGRES_USER=mcp_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcp_user -d mcp_content"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Monitoring and logging
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - mcp-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    ports:
      - "3007:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - mcp-network
    depends_on:
      - prometheus
    restart: unless-stopped

# Networks
networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  presenton_data:
    driver: local
  presenton_templates:
    driver: local
  memory_data:
    driver: local
  filesystem_data:
    driver: local
  nginx_logs:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

